#!/bin/bash

set -o pipefail
# set -o xtrace
# set -o nounset
set -o errexit

subcommand=$1
shift

if [[ "$subcommand" == "fmt-verify" || "$subcommand" == "fmt-update" ]]; then
    jsonnetfile="."
else
    jsonnetfile=$1
    shift
fi

version=
app=
dcservice=

buildversion=
dryrun="none"
push_to_latest_tag=true

usage="Usage: plantbuild run/build/push/show/k8scommit/k8s_cm_patch/k8s_set_images/k8s_apply ./plantbuild/test.jsonnet -a=app1 -v=1.0.0"

while getopts "v:a:b:d:l:" opt; do
    case $opt in
    v)
        version=$OPTARG
        ;;
    a)
        app=$OPTARG
        if [ -n "$app" ]; then
            dcservice=build_image_$OPTARG
        fi
        ;;
    b)
        buildversion=":$OPTARG"
        ;;
    d)
        dryrun=$OPTARG
        ;;
    l)
        push_to_latest_tag=$OPTARG
        ;;
    \?)
        echo "$usage"
        exit 1
        ;;
    esac
done

if [ -z "$jsonnetfile" ]; then
    echo "$usage"
    exit 1
fi

if ! [ -e "$jsonnetfile" ]; then
    echo "$jsonnetfile not exists"
    exit 1
fi

githash7=$(git rev-parse HEAD | cut -c 1-7)
if [ -z "$version" ]; then
    version=$githash7
fi

tag_version=$(git describe --tags --exact-match 2>/dev/null || echo "")

dir=$(dirname "$jsonnetfile")
filename=$(basename "$jsonnetfile")

if [ -z "$KUBECTL_BASH" ]; then
    KUBECTL_BASH="/bin/bash"
fi
dockerimage='ghcr.io/theplant/plantbuild'

# functions

push_image() {
    build_image "$1"
    # shellcheck disable=SC2086
    docker run -i --rm -e RUN="/src/$filename" -e VERSION="$1" -v "$(pwd)/$dir:/src" "$dockerimage$buildversion" | docker-compose -f - push $dcservice
}

build_image() {
    # shellcheck disable=SC2086
    docker run -i --rm -e RUN="/src/$filename" -e VERSION="$1" -v "$(pwd)/$dir:/src" "$dockerimage$buildversion" | docker-compose -f - build $dcservice
}

show() {
    local source=/src/$2
    if [ "$2" = '-' ]; then
        source='-'
    fi
    docker run -i --rm -e RUN=$source -e VERSION="$1" -v "$(pwd)/$dir:/src" "$dockerimage$buildversion"
}

fmt-verify() {
    docker run -i --rm -e VERSION="$1" -v "$(pwd)/$dir:/src" --entrypoint /fmt-verify.sh "$dockerimage$buildversion"
}

fmt-update() {
    docker run -i --rm -e VERSION="$1" -v "$(pwd)/$dir:/src" --entrypoint /fmt-update.sh "$dockerimage$buildversion"
}

_k() {
    if [ -z "$2" ]; then
        echo "kubectl $1"
        echo "kubectl $1" | $KUBECTL_BASH
    else
        content=$(printf "%q" "$2")
        echo "echo $content | kubectl $1" | $KUBECTL_BASH
    fi
}

k8scommit() {
    content=$(show 'latest' "$filename")
    if _k "apply -f -" "$content" | grep " unchanged"; then
        echo "latest not changed, so won't create new versions"
        return 1
    else
        content=$(show "$githash7" "$filename")
        _k "apply -f -" "$content"
        return 0
    fi
}

case $subcommand in

run)
    docker run --rm -e RUN="/src/$filename" -e VERSION="$version" -v "$(pwd)/$dir:/src" "$dockerimage$buildversion" | docker-compose -f - run "$app"_test
    ;;

build)
    build_image "$version"
    if [ "$push_to_latest_tag" = true ]; then
        build_image "latest"
    fi
    if [ -n "$tag_version" ]; then
        build_image "$tag_version"
    fi
    ;;

push)
    push_image "$version"
    if [ "$push_to_latest_tag" = true ]; then
        push_image "latest"
    fi
    if [ -n "$tag_version" ]; then
        push_image "$tag_version"
    fi
    ;;

show)
    show "$version" "$filename"
    ;;

fmt-verify)
    fmt-verify "$version"
    ;;

fmt-update)
    fmt-update "$version"
    ;;

k8scommit)
    if k8scommit; then
        exit 0
    else
        exit 1
    fi
    ;;

k8s_set_images)
    show "$version" "$filename" | jq -r '.commands[]' | while read -r i; do
        _k "$i"
    done
    ;;

k8s_cm_patch)
    if k8scommit; then
        meta=$(show "$githash7" "$filename" | jq ".metadata")
        namespace=$(echo "$meta" | jq -r ".namespace")
        configmap=$(echo "$meta" | jq -r ".name")

        patchscript='local k8s = import "k8s.jsonnet"; k8s.patch_deployment_env("'$configmap'")'
        resourceName=$(echo "$meta" | jq -r ".labels.deployment")
        k8sresource='deployment'
        if echo "$meta" | jq -e -r ".labels.cronjob"; then
            k8sresource='cronjob'
            resourceName=$(echo "$meta" | jq -r ".labels.cronjob")
            patchscript='local k8s = import "k8s.jsonnet"; k8s.patch_cronjob_env("'$configmap'")'
        fi

        if echo "$meta" | jq -e -r ".labels.job"; then
            k8sresource='job'
            resourceName=$(echo "$meta" | jq -r ".labels.job")
            patchscript='local k8s = import "k8s.jsonnet"; k8s.patch_job_env("'$configmap'")'
        fi

        patch=$(echo "$patchscript" | show "$githash7" '-')
        echo "patching with: $patch"
        _k "-n $namespace patch $k8sresource/$resourceName --type=json -p \"$patch\""
    fi
    ;;

k8s_apply)
    content=$(show "$version" "$filename")
    _k "apply -f - --dry-run=$dryrun" "$content"
    ;;
*)
    echo "$usage"
    exit 1
    ;;

esac
